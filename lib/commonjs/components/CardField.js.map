{"version":3,"sources":["CardField.tsx"],"names":["CardFieldNative","CardField","ref","onCardChange","onFocus","onBlur","cardStyle","placeholders","postalCodeEnabled","props","inputRef","onCardChangeHandler","event","card","nativeEvent","data","last4","expiryMonth","expiryYear","complete","brand","cvc","validExpiryDate","validNumber","validCVC","hasOwnProperty","postalCode","number","__DEV__","console","warn","onFocusHandler","focusedField","current","focus","UIManager","dispatchViewManagerCommand","blur","clear","inputRefValue","backgroundColor","borderColor","borderWidth","borderRadius","cursorColor","fontSize","placeholderColor","textColor","textErrorColor","fontFamily","expiration"],"mappings":"qWACA,qDAOA,yCASA,mC,ysCAOA,GAAMA,CAAAA,eAAe,CACnB,wCAAmD,WAAnD,CADF,CA2CO,GAAMC,CAAAA,SAAS,CAAG,sBACvB,cAUEC,GAVF,CAWK,IATDC,CAAAA,YASC,MATDA,YASC,CARDC,OAQC,MARDA,OAQC,CAPDC,MAOC,MAPDA,MAOC,CANDC,SAMC,MANDA,SAMC,CALDC,YAKC,MALDA,YAKC,CAJDC,iBAIC,MAJDA,iBAIC,CAHEC,KAGF,uDACH,GAAMC,CAAAA,QAAQ,CAAG,kBAAY,IAAZ,CAAjB,CAEA,GAAMC,CAAAA,mBAAmB,CAAG,uBAC1B,SAACC,KAAD,CAAyD,CACvD,GAAMC,CAAAA,IAAI,CAAGD,KAAK,CAACE,WAAnB,CAEA,GAAMC,CAAAA,IAA4B,CAAG,CACnCC,KAAK,CAAEH,IAAI,CAACG,KADuB,CAEnCC,WAAW,CAAEJ,IAAI,CAACI,WAFiB,CAGnCC,UAAU,CAAEL,IAAI,CAACK,UAHkB,CAInCC,QAAQ,CAAEN,IAAI,CAACM,QAJoB,CAKnCC,KAAK,CAAEP,IAAI,CAACO,KALuB,CAMnCC,GAAG,CAAER,IAAI,CAACQ,GANyB,CAOnCC,eAAe,CAAET,IAAI,CAACS,eAPa,CAQnCC,WAAW,CAAEV,IAAI,CAACU,WARiB,CASnCC,QAAQ,CAAEX,IAAI,CAACW,QAToB,CAArC,CAYA,GAAIX,IAAI,CAACY,cAAL,CAAoB,YAApB,CAAJ,CAAuC,CACrCV,IAAI,CAACW,UAAL,CAAkBb,IAAI,CAACa,UAAL,EAAmB,EAArC,CACD,CACD,GAAIb,IAAI,CAACY,cAAL,CAAoB,QAApB,CAAJ,CAAmC,CACjCV,IAAI,CAACY,MAAL,CAAcd,IAAI,CAACc,MAAL,EAAe,EAA7B,CACA,GAAIC,OAAO,EAAIzB,YAAX,EAA2BU,IAAI,CAACM,QAApC,CAA8C,CAC5CU,OAAO,CAACC,IAAR,+YAGD,CACF,CACD3B,YAAY,MAAZ,QAAAA,YAAY,CAAGY,IAAH,CAAZ,CACD,CA5ByB,CA6B1B,CAACZ,YAAD,CA7B0B,CAA5B,CAgCA,GAAM4B,CAAAA,cAAc,CAAG,uBACrB,SAACnB,KAAD,CAAW,CACT,GAAQoB,CAAAA,YAAR,CAAyBpB,KAAK,CAACE,WAA/B,CAAQkB,YAAR,CACA,GAAIA,YAAJ,CAAkB,CAChB,wBAAWtB,QAAQ,CAACuB,OAApB,EACA7B,OAAO,MAAP,QAAAA,OAAO,CAAG4B,YAAH,CAAP,CACD,CAHD,IAGO,CACL3B,MAAM,MAAN,QAAAA,MAAM,GACP,CACF,CAToB,CAUrB,CAACD,OAAD,CAAUC,MAAV,CAVqB,CAAvB,CAaA,GAAM6B,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClBC,uBAAUC,0BAAV,CACE,gCAAe1B,QAAQ,CAACuB,OAAxB,CADF,CAEE,OAFF,CAGE,EAHF,EAKD,CAND,CAQA,GAAMI,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjBF,uBAAUC,0BAAV,CACE,gCAAe1B,QAAQ,CAACuB,OAAxB,CADF,CAEE,MAFF,CAGE,EAHF,EAKD,CAND,CAQA,GAAMK,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,EAAM,CAClBH,uBAAUC,0BAAV,CACE,gCAAe1B,QAAQ,CAACuB,OAAxB,CADF,CAEE,OAFF,CAGE,EAHF,EAKD,CAND,CAQA,+BAAoB/B,GAApB,CAAyB,iBAAO,CAC9BgC,KAAK,CAALA,KAD8B,CAE9BG,IAAI,CAAJA,IAF8B,CAG9BC,KAAK,CAALA,KAH8B,CAAP,EAAzB,EAMA,2BAAgB,UAAM,CACpB,GAAMC,CAAAA,aAAa,CAAG7B,QAAQ,CAACuB,OAA/B,CACA,GAAIM,aAAa,GAAK,IAAtB,CAA4B,CAC1B,2BAAcA,aAAd,EACA,MAAO,WAAM,CACX,6BAAgBA,aAAhB,EACA,GAAI,uCAA4BA,aAAhC,CAA+C,CAC7CA,aAAa,CAACF,IAAd,GACD,CACF,CALD,CAMD,CACD,MAAO,WAAM,CAAE,CAAf,CACD,CAZD,CAYG,CAAC3B,QAAD,CAZH,EAcA,MACE,8BAAC,eAAD,wBACE,GAAG,CAAEA,QADP,CAEE,YAAY,CAAEC,mBAFhB,CAGE,aAAa,CAAEoB,cAHjB,CAIE,iBAAiB,CAAEvB,iBAAF,OAAEA,iBAAF,CAAuB,IAJ1C,CAKE,SAAS,CAAE,CACTgC,eAAe,CAAElC,SAAF,cAAEA,SAAS,CAAEkC,eADnB,CAETC,WAAW,CAAEnC,SAAF,cAAEA,SAAS,CAAEmC,WAFf,CAGTC,WAAW,CAAEpC,SAAF,cAAEA,SAAS,CAAEoC,WAHf,CAITC,YAAY,CAAErC,SAAF,cAAEA,SAAS,CAAEqC,YAJhB,CAKTC,WAAW,CAAEtC,SAAF,cAAEA,SAAS,CAAEsC,WALf,CAMTC,QAAQ,CAAEvC,SAAF,cAAEA,SAAS,CAAEuC,QANZ,CAOTC,gBAAgB,CAAExC,SAAF,cAAEA,SAAS,CAAEwC,gBAPpB,CAQTC,SAAS,CAAEzC,SAAF,cAAEA,SAAS,CAAEyC,SARb,CASTC,cAAc,CAAE1C,SAAF,cAAEA,SAAS,CAAE0C,cATlB,CAUTC,UAAU,CAAE3C,SAAF,cAAEA,SAAS,CAAE2C,UAVd,CALb,CAiBE,YAAY,CAAE,CACZtB,MAAM,CAAEpB,YAAF,cAAEA,YAAY,CAAEoB,MADV,CAEZuB,UAAU,CAAE3C,YAAF,cAAEA,YAAY,CAAE2C,UAFd,CAGZ7B,GAAG,CAAEd,YAAF,cAAEA,YAAY,CAAEc,GAHP,CAIZK,UAAU,CAAEnB,YAAF,cAAEA,YAAY,CAAEmB,UAJd,CAjBhB,EAuBMjB,KAvBN,gFADF,CA2BD,CAnIsB,CAAlB,C","sourcesContent":["import type { CardFieldInput } from '../types';\nimport React, {\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from 'react';\nimport {\n  AccessibilityProps,\n  NativeSyntheticEvent,\n  requireNativeComponent,\n  UIManager,\n  StyleProp,\n  findNodeHandle,\n  ViewStyle,\n} from 'react-native';\nimport {\n  currentlyFocusedInput,\n  focusInput,\n  registerInput,\n  unregisterInput,\n} from '../helpers';\n\nconst CardFieldNative =\n  requireNativeComponent<CardFieldInput.NativeProps>('CardField');\n\n/**\n *  Card Field Component Props\n */\nexport interface Props extends AccessibilityProps {\n  style?: StyleProp<ViewStyle>;\n  postalCodeEnabled?: boolean;\n  cardStyle?: CardFieldInput.Styles;\n  placeholders?: CardFieldInput.Placeholders;\n  autofocus?: boolean;\n  onCardChange?(card: CardFieldInput.Details): void;\n  onBlur?(): void;\n  onFocus?(focusedField: CardFieldInput.FieldName | null): void;\n  testID?: string;\n  /**\n   * WARNING: If set to `true` the full card number will be returned in the `onCardChange` handler.\n   * Only do this if you're certain that you fulfill the necessary PCI compliance requirements.\n   * Make sure that you're not mistakenly logging or storing full card details!\n   * See the docs for details: https://stripe.com/docs/security/guide#validating-pci-compliance\n   */\n  dangerouslyGetFullCardDetails?: boolean;\n}\n\n/**\n *  Card Field Component\n *\n * @example\n * ```ts\n * <CardField\n *    postalCodeEnabled={false}\n *    onCardChange={(cardDetails) => {\n *    console.log('card details', cardDetails);\n *      setCard(cardDetails);\n *    }}\n *    style={{height: 50}}\n *  />\n * ```\n * @param __namedParameters Props\n * @returns JSX.Element\n * @category ReactComponents\n */\nexport const CardField = forwardRef<CardFieldInput.Methods, Props>(\n  (\n    {\n      onCardChange,\n      onFocus,\n      onBlur,\n      cardStyle,\n      placeholders,\n      postalCodeEnabled,\n      ...props\n    },\n    ref\n  ) => {\n    const inputRef = useRef<any>(null);\n\n    const onCardChangeHandler = useCallback(\n      (event: NativeSyntheticEvent<CardFieldInput.Details>) => {\n        const card = event.nativeEvent;\n\n        const data: CardFieldInput.Details = {\n          last4: card.last4,\n          expiryMonth: card.expiryMonth,\n          expiryYear: card.expiryYear,\n          complete: card.complete,\n          brand: card.brand,\n          cvc: card.cvc,\n          validExpiryDate: card.validExpiryDate,\n          validNumber: card.validNumber,\n          validCVC: card.validCVC,\n        };\n\n        if (card.hasOwnProperty('postalCode')) {\n          data.postalCode = card.postalCode || '';\n        }\n        if (card.hasOwnProperty('number')) {\n          data.number = card.number || '';\n          if (__DEV__ && onCardChange && card.complete) {\n            console.warn(\n              `[stripe-react-native] ⚠️ WARNING: You've enabled \\`dangerouslyGetFullCardDetails\\`, meaning full card details are being returned. Only do this if you're certain that you fulfill the necessary PCI compliance requirements. Make sure that you're not mistakenly logging or storing full card details! See the docs for details: https://stripe.com/docs/security/guide#validating-pci-compliance`\n            );\n          }\n        }\n        onCardChange?.(data);\n      },\n      [onCardChange]\n    );\n\n    const onFocusHandler = useCallback(\n      (event) => {\n        const { focusedField } = event.nativeEvent;\n        if (focusedField) {\n          focusInput(inputRef.current);\n          onFocus?.(focusedField);\n        } else {\n          onBlur?.();\n        }\n      },\n      [onFocus, onBlur]\n    );\n\n    const focus = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'focus' as any,\n        []\n      );\n    };\n\n    const blur = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'blur' as any,\n        []\n      );\n    };\n\n    const clear = () => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(inputRef.current),\n        'clear' as any,\n        []\n      );\n    };\n\n    useImperativeHandle(ref, () => ({\n      focus,\n      blur,\n      clear,\n    }));\n\n    useLayoutEffect(() => {\n      const inputRefValue = inputRef.current;\n      if (inputRefValue !== null) {\n        registerInput(inputRefValue);\n        return () => {\n          unregisterInput(inputRefValue);\n          if (currentlyFocusedInput() === inputRefValue) {\n            inputRefValue.blur();\n          }\n        };\n      }\n      return () => {};\n    }, [inputRef]);\n\n    return (\n      <CardFieldNative\n        ref={inputRef}\n        onCardChange={onCardChangeHandler}\n        onFocusChange={onFocusHandler}\n        postalCodeEnabled={postalCodeEnabled ?? true}\n        cardStyle={{\n          backgroundColor: cardStyle?.backgroundColor,\n          borderColor: cardStyle?.borderColor,\n          borderWidth: cardStyle?.borderWidth,\n          borderRadius: cardStyle?.borderRadius,\n          cursorColor: cardStyle?.cursorColor,\n          fontSize: cardStyle?.fontSize,\n          placeholderColor: cardStyle?.placeholderColor,\n          textColor: cardStyle?.textColor,\n          textErrorColor: cardStyle?.textErrorColor,\n          fontFamily: cardStyle?.fontFamily,\n        }}\n        placeholders={{\n          number: placeholders?.number,\n          expiration: placeholders?.expiration,\n          cvc: placeholders?.cvc,\n          postalCode: placeholders?.postalCode,\n        }}\n        {...props}\n      />\n    );\n  }\n);\n"]}